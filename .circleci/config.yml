# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: cimg/python:3.9.1-browsers
  allure-updated:
    orbs:
    commands:
      install:
        description: Installs Allure Framework and registers it as /usr/local/bin/allure
        parameters:
          version:
            description: Allure version to use
            type: string
            default: 2.13.1
        steps:
          - run:
              name: Allure archive download
              command: curl -L https://github.com/allure-framework/allure2/releases/download/<< parameters.version >>/allure-<< parameters.version >>.zip -o /tmp/allure.zip
          - run:
              name: Archive extraction
              command: unzip /tmp/allure.zip
          - run:
              name: Allure installation
              command: sudo mv allure-<< parameters.version >> /usr/local/share/allure
          - run:
              name: Allure binary symlinking
              command: sudo ln -s /usr/local/share/allure/bin/allure /usr/local/bin/allure
      report:
        description: Generates report using Allure Framework
        parameters:
          configuration-path:
            description: Path to Allure configuration, uses default one if omitted
            type: string
            default: /usr/local/share/allure/config/allure.yml
          target-path:
            description: Path for report directory
            type: string
            default: allure-report
          results-path:
            description: Path to directory with test results
            type: string
            default: allure-results
          artifact-path:
            description: Path that will be used when storing result as artifact
            type: string
            default: Report/Allure
        steps:
          - run:
              name: Allure report generation (<< parameters.results-path >> -> << parameters.target-path >>)
              command: |
                allure generate \
                  --config << parameters.configuration-path >> \
                  --report-dir << parameters.target-path >> \
                  << parameters.results-path >>
          - store_artifacts:
              path: << parameters.target-path >>
              destination: << parameters.artifact-path >>


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  test-ptb: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8

    resource_class: small
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      # - python/install-packages:
      #    pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Java version
          command: java --version

      - run:
          name: Install requriemnt
          command: pip install -r requirements.txt
                   pip install -r requirements-dev.txt
      - allure-updated/install:
          version: 2.17.2
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest -k "inlinequery or chat" -v --alluredir="/tmp/allure_results"
      - allure-updated/report:
          target-path: /tmp/allure_results
          results-path: /tmp/allure_results



# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  start-test: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - test-ptb
